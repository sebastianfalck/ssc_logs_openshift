pipeline {
    agent any

    environment {
        REPO_URL         = ''
        REPO_CREDENTIALS = 'github-credentials'
        SERVER_INTERNAL  = 'https://internal.openshift.example:6443'
        SERVER_EXTERNAL  = 'https://external.openshift.example:6443'
        SERVER_DRS       = 'https://drs.openshift.example:6443'
        SENSITIVE_KEYS   = 'password,token,secret,apikey,credentials'
    }

    parameters {
        string(name: 'NOMBRE',    defaultValue: '',                   description: 'Nombre del microservicio')
        choice(name: 'AMBIENTE',  choices: ['dev','uat','prd','drs'], description: 'Ambiente')
        choice(name: 'ACCION',
               choices: ['none','get logs','get deployment','describe pod','get quota','get pods','get secrets'],
               description: 'Comando a ejecutar')
    }

    stages {
        stage('Checkout Project') {
            steps {
                dir('project') {
                    git branch: 'main',
                        url: env.REPO_URL,
                        credentialsId: env.REPO_CREDENTIALS
                }
            }
        }

        stage('Leer configuración CSV') {
            steps {
                script {
                    def lines   = readFile('project/ProjectsJenkinsCardifCSV.csv')
                                     .readLines()
                                     .findAll { it.trim() }
                    def headers = lines[0].split(';').collect { it.trim() }
                    def fila = lines.drop(1)
                        .collect { l ->
                            def vals = l.split(';')
                            def m    = [:]
                            headers.eachWithIndex { h,i -> m[h] = (vals.size()>i?vals[i]:'').trim() }
                            m
                        }
                        .find { it.appName == params.NOMBRE }
                    writeFile file: "fila_${params.NOMBRE}.json",
                              text: groovy.json.JsonOutput.toJson(fila)
                }
            }
        }

        stage('Confirmación de país') {
            steps {
                script {
                    def fila    = readJSON file: "fila_${params.NOMBRE}.json"
                    def paisCsv = fila.country?.toLowerCase()
                    def partes  = env.WORKSPACE.split(/[\\/]+/)
                    if (partes.size()<2) error "Ruta demasiado corta: ${env.WORKSPACE}"
                    def paisRuta = partes[-2].toLowerCase()
                    echo "País ruta: ${paisRuta}, país CSV: ${paisCsv}"
                    if (paisCsv != paisRuta) {
                        error "El microservicio no pertenece a tu país: ${paisCsv} vs ${paisRuta}"
                    }
                }
            }
        }

        stage('Test OC Login') {
            steps {
                script {
                    def fila      = readJSON file: "fila_${params.NOMBRE}.json"
                    def utils     = new JenkinsUtils(this)
                    def server    = utils.getServer(params.AMBIENTE, fila.usage)

                    wrap([$class: 'MaskPasswordsBuildWrapper',
                        varPasswordPairs: [[var: 'TOKEN', password: fila["Token${params.AMBIENTE.capitalize()}"]]]]) {
                        echo "Probando login con servidor: ${server}"
                        sh utils.getOcLoginCmd(server, env.TOKEN)
                        sh "oc whoami"
                        sh utils.getOcLogoutCmd()
                    }
                }
            }
        }

        stage('get logs') {
            when { expression { params.ACCION == 'get logs' } }
            steps {
                script {
                    def fila      = readJSON file: "fila_${params.NOMBRE}.json"
                    def utils     = new JenkinsUtils(this)
                    def server    = utils.getServer(params.AMBIENTE, fila.usage)
                    def namespace = fila["NameSpace${params.AMBIENTE.capitalize()}"]

                    wrap([$class: 'MaskPasswordsBuildWrapper',
                          varPasswordPairs: [[var: 'TOKEN', password: fila["Token${params.AMBIENTE.capitalize()}"]]]]) {
                        sh utils.getOcLoginCmd(server, env.TOKEN)
                        def pod = utils.getPodName(namespace, params.NOMBRE)
                        echo "Pod: ${pod}"
                        utils.getLogs(pod, namespace, params.NOMBRE, params.AMBIENTE)
                        sh utils.getOcLogoutCmd()
                    }

                    env.logSalida = readFile('reporte.html')
                    wrap([$class:'BuildUser']) {
                        emailext(
                            to: env.BUILD_USER_EMAIL,
                            subject: "Logs ${params.NOMBRE} - ${params.AMBIENTE}",
                            body: "${env.logSalida}"
                        )
                    }
                }
            }
        }

        stage('get deployment') {
            when { expression { params.ACCION == 'get deployment' } }
            steps {
                script {
                    def fila      = readJSON file: "fila_${params.NOMBRE}.json"
                    def utils     = new JenkinsUtils(this)
                    def server    = utils.getServer(params.AMBIENTE, fila.usage)
                    def namespace = fila["NameSpace${params.AMBIENTE.capitalize()}"]

                    wrap([$class: 'MaskPasswordsBuildWrapper',
                          varPasswordPairs: [[var: 'TOKEN', password: fila["Token${params.AMBIENTE.capitalize()}"]]]]) {
                        sh utils.getOcLoginCmd(server, env.TOKEN)
                        def deployment = utils.getDeploymentName(namespace, params.NOMBRE)
                        echo "Deployment: ${deployment}"
                        utils.getDeploymentYaml(deployment, namespace, params.NOMBRE, params.AMBIENTE)
                        sh utils.getOcLogoutCmd()
                    }

                    env.logSalida = readFile('reporte.html')
                    wrap([$class:'BuildUser']) {
                        emailext(
                            to: env.BUILD_USER_EMAIL,
                            subject: "Deployment ${params.NOMBRE} - ${params.AMBIENTE}",
                            body: "${env.logSalida}"
                        )
                    }
                }
            }
        }

        stage('describe pod') {
            when { expression { params.ACCION == 'describe pod' } }
            steps {
                script {
                    def fila      = readJSON file: "fila_${params.NOMBRE}.json"
                    def utils     = new JenkinsUtils(this)
                    def server    = utils.getServer(params.AMBIENTE, fila.usage)
                    def namespace = fila["NameSpace${params.AMBIENTE.capitalize()}"]

                    wrap([$class: 'MaskPasswordsBuildWrapper',
                          varPasswordPairs: [[var: 'TOKEN', password: fila["Token${params.AMBIENTE.capitalize()}"]]]]) {
                        sh utils.getOcLoginCmd(server, env.TOKEN)
                        def pod = utils.getPodName(namespace, params.NOMBRE)
                        echo "Pod: ${pod}"
                        utils.getDescribePod(pod, namespace, params.NOMBRE, params.AMBIENTE)
                        sh utils.getOcLogoutCmd()
                    }

                    env.logSalida = readFile('reporte.html')
                    wrap([$class:'BuildUser']) {
                        emailext(
                            to: env.BUILD_USER_EMAIL,
                            subject: "Describe Pod ${params.NOMBRE} - ${params.AMBIENTE}",
                            body: "${env.logSalida}"
                        )
                    }
                }
            }
        }

        stage('get quota') {
            when { expression { params.ACCION == 'get quota' } }
            steps {
                script {
                    def fila      = readJSON file: "fila_${params.NOMBRE}.json"
                    def utils     = new JenkinsUtils(this)
                    def server    = utils.getServer(params.AMBIENTE, fila.usage)
                    def namespace = fila["NameSpace${params.AMBIENTE.capitalize()}"]

                    wrap([$class: 'MaskPasswordsBuildWrapper',
                          varPasswordPairs: [[var: 'TOKEN', password: fila["Token${params.AMBIENTE.capitalize()}"]]]]) {
                        sh utils.getOcLoginCmd(server, env.TOKEN)
                        utils.getQuota(namespace, params.NOMBRE, params.AMBIENTE)
                        sh utils.getOcLogoutCmd()
                    }

                    env.logSalida = readFile('reporte.html')
                    wrap([$class:'BuildUser']) {
                        emailext(
                            to: env.BUILD_USER_EMAIL,
                            subject: "Quota ${namespace} - ${params.AMBIENTE}",
                            body: "${env.logSalida}"
                        )
                    }
                }
            }
        }

        stage('get pods') {
            when { expression { params.ACCION == 'get pods' } }
            steps {
                script {
                    def fila      = readJSON file: "fila_${params.NOMBRE}.json"
                    def utils     = new JenkinsUtils(this)
                    def server    = utils.getServer(params.AMBIENTE, fila.usage)
                    def namespace = fila["NameSpace${params.AMBIENTE.capitalize()}"]

                    wrap([$class: 'MaskPasswordsBuildWrapper',
                          varPasswordPairs: [[var: 'TOKEN', password: fila["Token${params.AMBIENTE.capitalize()}"]]]]) {
                        sh utils.getOcLoginCmd(server, env.TOKEN)
                        utils.getPods(namespace, params.NOMBRE, params.AMBIENTE)
                        sh utils.getOcLogoutCmd()
                    }

                    env.logSalida = readFile('reporte.html')
                    wrap([$class:'BuildUser']) {
                        emailext(
                            to: env.BUILD_USER_EMAIL,
                            subject: "Pods ${namespace} - ${params.AMBIENTE}",
                            body: "${env.logSalida}"
                        )
                    }
                }
            }
        }

        stage('get secrets') {
            when { expression { params.ACCION == 'get secrets' } }
            steps {
                script {
                    def fila       = readJSON file: "fila_${params.NOMBRE}.json"
                    def utils      = new JenkinsUtils(this)
                    def server     = utils.getServer(params.AMBIENTE, fila.usage)
                    def namespace  = fila["NameSpace${params.AMBIENTE.capitalize()}"]
                    def secret     = "${params.NOMBRE}"
                    def pattern    = env.SENSITIVE_KEYS.split(',').join('|')

                    wrap([$class: 'MaskPasswordsBuildWrapper',
                          varPasswordPairs: [[var: 'TOKEN', password: fila["Token${params.AMBIENTE.capitalize()}"]]]]) {
                        sh utils.getOcLoginCmd(server, env.TOKEN)

                        sh '''
                            echo "" > secrets.txt
                            oc get secret ${secret} -n ${namespace} -o json | jq -r '.data | to_entries[] | "\\(.key)=\\(.value)"' | while IFS== read -r k v; do
                                if [[ "$k" =~ (${pattern}) ]]; then
                                    echo "$k=" >> secrets.txt
                                else
                                    echo "$k=$(echo $v | base64 -d)" >> secrets.txt
                                fi
                            done
                        '''

                        sh "python logs.py secrets.txt ${params.NOMBRE} ${params.AMBIENTE} secrets"
                        sh utils.getOcLogoutCmd()
                    }

                    env.logSalida = readFile('reporte.html')
                    wrap([$class:'BuildUser']) {
                        emailext(
                            to: env.BUILD_USER_EMAIL,
                            subject: "Secrets ${params.NOMBRE} - ${params.AMBIENTE}",
                            body: "${env.logSalida}"
                        )
                    }
                }
            }
        }
    }
}
