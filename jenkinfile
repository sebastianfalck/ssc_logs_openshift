pipeline {
    agent any

    environment {
        REPO_URL         = ''
        REPO_CREDENTIALS = 'github-credentials'
        SERVER_INTERNAL  = 'https://internal.openshift.example:6443'
        SERVER_EXTERNAL  = 'https://external.openshift.example:6443'
        SERVER_DRS       = 'https://drs.openshift.example:6443'
    }

    parameters {
        string(name: 'NOMBRE', defaultValue: '', description: 'Nombre del microservicio')
        choice(name: 'AMBIENTE', choices: ['dev','uat','prd','drs'], description: 'Ambiente')
        choice(
            name: 'ACCION',
            choices: [
                'none',
                'get logs',
                'get deployment',
                'describe pod',
                'get quota',
                'get pods'
            ],
            description: 'Comando a ejecutar'
        )
    }

    stages {
        stage('Checkout Project') {
            steps {
                dir('project') {
                    git branch: 'main',
                        url: env.REPO_URL,
                        credentialsId: env.REPO_CREDENTIALS
                }
            }
        }

        stage('Leer configuración CSV') {
            steps {
                script {
                    def lines  = readFile('project/ProjectsJenkinsCardifCSV.csv')
                                   .readLines()
                                   .findAll { it.trim() }
                    def headers = lines[0].split(';').collect { it.trim() }
                    def fila = lines.drop(1)
                        .collect { l ->
                            def vals = l.split(';')
                            def map  = [:]
                            headers.eachWithIndex { h,i ->
                                map[h] = (vals.size()>i ? vals[i] : '').trim()
                            }
                            map
                        }
                        .find { it['appName']==params.NOMBRE }
                    writeFile file: "fila_${params.NOMBRE}.json",
                              text: groovy.json.JsonOutput.toJson(fila)
                }
            }
        }

        stage('Confirmación de país') {
            steps {
                script {
                    def fila     = readJSON file: "fila_${params.NOMBRE}.json"
                    def paisCsv  = fila.country?.toLowerCase()
                    def partes   = env.WORKSPACE.split(/[\\/]+/)
                    if (partes.size()<2) error "Ruta demasiado corta: ${env.WORKSPACE}"
                    def paisRuta = partes[-2].toLowerCase()
                    echo "País ruta: ${paisRuta}, país CSV: ${paisCsv}"
                    if (paisCsv != paisRuta) {
                        error "El microservicio no pertenece a tu país: ${paisCsv} vs ${paisRuta}"
                    }
                }
            }
        }

        stage('get logs') {
            when { expression { params.ACCION == 'get logs' } }
            steps {
                script {
                    def fila      = readJSON file: "fila_${params.NOMBRE}.json"
                    def utils     = new JenkinsUtils(this)
                    def server    = utils.getServer(params.AMBIENTE, fila.usage)
                    def token     = fila["Token${params.AMBIENTE.capitalize()}"]
                    def namespace = fila["NameSpace${params.AMBIENTE.capitalize()}"]

                    sh utils.getOcLoginCmd(server, token)

                    def pod = sh(
                        script: "oc get pod -n ${namespace} | grep '${params.NOMBRE}-.*' | awk '{print \$1}' | head -n1",
                        returnStdout: true
                    ).trim()

                    sh "oc logs ${pod} -n ${namespace} > ${pod}.log"
                    sh "python logs.py ${pod}.log ${params.NOMBRE} ${params.AMBIENTE} logs"

                    env.logSalida = readFile('reporte.html')
                    wrap([$class:'BuildUser']) {
                        emailext(
                            to: env.BUILD_USER_EMAIL,
                            subject: "Logs ${params.NOMBRE} - ${params.AMBIENTE}",
                            body: "${env.logSalida}"
                        )
                    }

                    sh utils.getOcLogoutCmd()
                }
            }
        }

        stage('get deployment') {
            when { expression { params.ACCION == 'get deployment' } }
            steps {
                script {
                    def fila      = readJSON file: "fila_${params.NOMBRE}.json"
                    def utils     = new JenkinsUtils(this)
                    def server    = utils.getServer(params.AMBIENTE, fila.usage)
                    def token     = fila["Token${params.AMBIENTE.capitalize()}"]
                    def namespace = fila["NameSpace${params.AMBIENTE.capitalize()}"]

                    sh utils.getOcLoginCmd(server, token)

                    def deploy = sh(
                        script: "oc get deployment -n ${namespace} | grep '${params.NOMBRE}' | awk '{print \$1}'",
                        returnStdout: true
                    ).trim()

                    sh "oc get deployment ${deploy} -n ${namespace} -o yaml > deployment.yaml"
                    sh "python logs.py deployment.yaml ${params.NOMBRE} ${params.AMBIENTE} deployment"

                    env.logSalida = readFile('reporte.html')
                    wrap([$class:'BuildUser']) {
                        emailext(
                            to: env.BUILD_USER_EMAIL,
                            subject: "Deployment ${params.NOMBRE} - ${params.AMBIENTE}",
                            body: "${env.logSalida}"
                        )
                    }

                    sh utils.getOcLogoutCmd()
                }
            }
        }

        stage('describe pod') {
            when { expression { params.ACCION == 'describe pod' } }
            steps {
                script {
                    def fila      = readJSON file: "fila_${params.NOMBRE}.json"
                    def utils     = new JenkinsUtils(this)
                    def server    = utils.getServer(params.AMBIENTE, fila.usage)
                    def token     = fila["Token${params.AMBIENTE.capitalize()}"]
                    def namespace = fila["NameSpace${params.AMBIENTE.capitalize()}"]

                    sh utils.getOcLoginCmd(server, token)

                    def pod = sh(
                        script: "oc get pod -n ${namespace} | grep '${params.NOMBRE}-.*' | awk '{print \$1}' | head -n1",
                        returnStdout: true
                    ).trim()

                    sh "oc describe pod ${pod} -n ${namespace} > describe.txt"
                    sh "python logs.py describe.txt ${params.NOMBRE} ${params.AMBIENTE} describe"

                    env.logSalida = readFile('reporte.html')
                    wrap([$class:'BuildUser']) {
                        emailext(
                            to: env.BUILD_USER_EMAIL,
                            subject: "Describe Pod ${params.NOMBRE} - ${params.AMBIENTE}",
                            body: "${env.logSalida}"
                        )
                    }

                    sh utils.getOcLogoutCmd()
                }
            }
        }

        stage('get quota') {
            when { expression { params.ACCION == 'get quota' } }
            steps {
                script {
                    def fila      = readJSON file: "fila_${params.NOMBRE}.json"
                    def utils     = new JenkinsUtils(this)
                    def server    = utils.getServer(params.AMBIENTE, fila.usage)
                    def token     = fila["Token${params.AMBIENTE.capitalize()}"]
                    def namespace = fila["NameSpace${params.AMBIENTE.capitalize()}"]

                    sh utils.getOcLoginCmd(server, token)

                    sh "oc get resourcequota -n ${namespace} -o yaml > quota.yaml"
                    sh "python logs.py quota.yaml ${params.NOMBRE} ${params.AMBIENTE} quota"

                    env.logSalida = readFile('reporte.html')
                    wrap([$class:'BuildUser']) {
                        emailext(
                            to: env.BUILD_USER_EMAIL,
                            subject: "Quota ${namespace} - ${params.AMBIENTE}",
                            body: "${env.logSalida}"
                        )
                    }

                    sh utils.getOcLogoutCmd()
                }
            }
        }

        stage('get pods') {
            when { expression { params.ACCION == 'get pods' } }
            steps {
                script {
                    def fila      = readJSON file: "fila_${params.NOMBRE}.json"
                    def utils     = new JenkinsUtils(this)
                    def server    = utils.getServer(params.AMBIENTE, fila.usage)
                    def token     = fila["Token${params.AMBIENTE.capitalize()}"]
                    def namespace = fila["NameSpace${params.AMBIENTE.capitalize()}"]

                    sh utils.getOcLoginCmd(server, token)

                    sh "oc get pods -n ${namespace} -o wide > pods.txt"
                    sh "python logs.py pods.txt ${params.NOMBRE} ${params.AMBIENTE} pods"

                    env.logSalida = readFile('reporte.html')
                    wrap([$class:'BuildUser']) {
                        emailext(
                            to: env.BUILD_USER_EMAIL,
                            subject: "Pods ${namespace} - ${params.AMBIENTE}",
                            body: "${env.logSalida}"
                        )
                    }

                    sh utils.getOcLogoutCmd()
                }
            }
        }
    }
}

class JenkinsUtils {
    def steps
    JenkinsUtils(steps) { this.steps = steps }

    def getServer(ambiente, tipoAcceso) {
        def serverMap = [
            'drs'     : { -> steps.env.SERVER_DRS },
            'internal': { -> steps.env.SERVER_INTERNAL },
            'external': { -> steps.env.SERVER_EXTERNAL }
        ]
        if (ambiente?.toLowerCase() == 'drs') return serverMap['drs']()
        def key = tipoAcceso?.toLowerCase()
        return serverMap.get(key, serverMap['internal'])()
    }

    def getOcLoginCmd(server, token) {
        return "oc login --insecure-skip-tls-verify --server=${server} --token=${token}"
    }

    def getOcLogoutCmd() {
        return "oc logout"
    }
}
